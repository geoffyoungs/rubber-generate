#!/usr/bin/env ruby

if FileTest.symlink?(__FILE__)
  file = File::readlink(__FILE__)
else
  file = __FILE__
end

require 'rbconfig'
require 'ftools'

dir = File::dirname(file)
$:.unshift(dir)
#puts dir
require 'strscan'
#require 'rubygems'
#require_gem 'rubber'
require 'rubber/codegen'
require 'rubber/mkextconf'
require 'rubber/scanner'
require 'rubber/types'
require 'rubber/autord'
require 'optparse'
require 'ostruct'

Args = OpenStruct.new
Args.build_dir = Config::CONFIG['sitearch']
Args.configure = false
Args.build = false



OptionParser.new { |opts|
	opts.banner = "Usage: rubber-generate [options] file"
	opts.on("--build-dir DIR", 'Directory for generating/building extension') do |dir|
		Args.build_dir = dir
	end
	opts.on('--configure', 'Run generated extconf.rb') do 
		Args.configure = true
	end
	opts.on('--build', 'Build extension') do
		Args.build = true
	end
}.parse!(ARGV)


args = ARGV#.select { |i| i[0] != ?- }
#switches = ARGV.select { |i| i[0] == ?- }
(args.size > 0 && args || Dir.glob('*.cr')).each { |file|

  file = File.expand_path(file)

  File.mkpath(Args.build_dir)
  Dir.chdir(Args.build_dir) do

	  
	  scanner = Rubber::CRScanner.new(file)
	  scanner.scan(nil)
	 
	  out = File.open(scanner.ext + ".c", 'w')
	  doc = File.open(scanner.ext + ".rd", 'w')
	  
	  extconf = File.open('extconf.rb', 'w')
	  Rubber.generate_extconf(scanner, extconf)
	  Rubber.generate_c_source(scanner, out)
	  Rubber.generate_rd(scanner, doc)
	  
	  
	  doc.close
	  out.close
	  extconf.close
	  
	  system('ruby','extconf.rb') if Args.configure
	  system('make') if Args.build
  end
}
#out.close
